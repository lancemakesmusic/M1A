#!/usr/bin/env python3
"""
Simple AutoPoster API Server for M1A Integration
This is a simplified version that works with the React Native frontend
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import json
import os
from datetime import datetime, timedelta
import uuid

# Initialize FastAPI app
app = FastAPI(
    title="M1A AutoPoster API",
    description="Simple API for M1A AutoPoster integration",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify your React Native app's origin
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Data models
class ContentGenerationRequest(BaseModel):
    prompt: str
    content_type: str
    platform: str
    brand_voice: str
    target_audience: str

class ContentGenerationResponse(BaseModel):
    success: bool
    content: Optional[str] = None
    message: Optional[str] = None

class PostData(BaseModel):
    uid: str
    content: str
    imageUrl: Optional[str] = None
    platforms: Dict[str, bool]
    scheduledTime: str
    status: str
    autoGenerated: bool
    createdAt: str

class ScheduledPostResponse(BaseModel):
    success: bool
    posts: Optional[List[Dict[str, Any]]] = None
    message: Optional[str] = None

class MediaLibraryResponse(BaseModel):
    success: bool
    media: Optional[List[Dict[str, Any]]] = None
    message: Optional[str] = None

class AutoPosterStatusResponse(BaseModel):
    success: bool
    enabled: Optional[bool] = None
    message: Optional[str] = None

class ToggleRequest(BaseModel):
    enabled: bool

# In-memory storage (in production, use a real database)
scheduled_posts = []
media_library = []
auto_poster_status = {"enabled": False}

# API Endpoints

@app.get("/")
async def root():
    return {"message": "M1A AutoPoster API is running!", "version": "1.0.0"}

@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/api/generate-content", response_model=ContentGenerationResponse)
async def generate_content(request: ContentGenerationRequest):
    """Generate content using AI (simplified version)"""
    try:
        # This is a simplified version - in production, integrate with actual AI service
        generated_content = f"""
ðŸŽ¯ **{request.content_type.title()} for {request.platform.title()}**

**Prompt:** {request.prompt}

**Brand Voice:** {request.brand_voice}
**Target Audience:** {request.target_audience}

**Generated Content:**
This is a sample generated post based on your prompt. In production, this would be generated by your AI service (GPT, Claude, etc.).

The content would be tailored for {request.platform} and optimized for {request.target_audience} audience with a {request.brand_voice} tone.

#content #socialmedia #automation
        """.strip()
        
        return ContentGenerationResponse(
            success=True,
            content=generated_content,
            message="Content generated successfully"
        )
    except Exception as e:
        return ContentGenerationResponse(
            success=False,
            message=f"Error generating content: {str(e)}"
        )

@app.post("/api/schedule-post")
async def schedule_post(post_data: PostData):
    """Schedule a new post"""
    try:
        post_id = str(uuid.uuid4())
        post = {
            "id": post_id,
            "uid": post_data.uid,
            "content": post_data.content,
            "imageUrl": post_data.imageUrl,
            "platforms": post_data.platforms,
            "scheduledTime": post_data.scheduledTime,
            "status": post_data.status,
            "autoGenerated": post_data.autoGenerated,
            "createdAt": post_data.createdAt
        }
        scheduled_posts.append(post)
        
        return {"success": True, "postId": post_id, "message": "Post scheduled successfully"}
    except Exception as e:
        return {"success": False, "message": f"Error scheduling post: {str(e)}"}

@app.get("/api/scheduled-posts", response_model=ScheduledPostResponse)
async def get_scheduled_posts():
    """Get all scheduled posts"""
    try:
        return ScheduledPostResponse(
            success=True,
            posts=scheduled_posts,
            message="Scheduled posts retrieved successfully"
        )
    except Exception as e:
        return ScheduledPostResponse(
            success=False,
            message=f"Error retrieving scheduled posts: {str(e)}"
        )

@app.get("/api/media-library", response_model=MediaLibraryResponse)
async def get_media_library():
    """Get media library"""
    try:
        # Sample media library data
        sample_media = [
            {
                "id": "1",
                "name": "Sample Image 1",
                "url": "https://via.placeholder.com/300x300",
                "type": "image",
                "createdAt": datetime.now().isoformat()
            },
            {
                "id": "2", 
                "name": "Sample Video 1",
                "url": "https://via.placeholder.com/300x300",
                "type": "video",
                "createdAt": datetime.now().isoformat()
            }
        ]
        
        return MediaLibraryResponse(
            success=True,
            media=sample_media,
            message="Media library retrieved successfully"
        )
    except Exception as e:
        return MediaLibraryResponse(
            success=False,
            message=f"Error retrieving media library: {str(e)}"
        )

@app.get("/api/auto-poster-status", response_model=AutoPosterStatusResponse)
async def get_auto_poster_status():
    """Get auto poster status"""
    try:
        return AutoPosterStatusResponse(
            success=True,
            enabled=auto_poster_status["enabled"],
            message="Auto poster status retrieved successfully"
        )
    except Exception as e:
        return AutoPosterStatusResponse(
            success=False,
            message=f"Error retrieving auto poster status: {str(e)}"
        )

@app.post("/api/toggle-auto-poster")
async def toggle_auto_poster(request: ToggleRequest):
    """Toggle auto poster on/off"""
    try:
        auto_poster_status["enabled"] = request.enabled
        return {
            "success": True,
            "enabled": request.enabled,
            "message": f"Auto poster {'enabled' if request.enabled else 'disabled'} successfully"
        }
    except Exception as e:
        return {"success": False, "message": f"Error toggling auto poster: {str(e)}"}

@app.put("/api/scheduled-posts/{post_id}")
async def update_scheduled_post(post_id: str, updates: Dict[str, Any]):
    """Update a scheduled post"""
    try:
        for i, post in enumerate(scheduled_posts):
            if post["id"] == post_id:
                scheduled_posts[i].update(updates)
                return {"success": True, "message": "Post updated successfully"}
        
        return {"success": False, "message": "Post not found"}
    except Exception as e:
        return {"success": False, "message": f"Error updating post: {str(e)}"}

@app.delete("/api/scheduled-posts/{post_id}")
async def delete_scheduled_post(post_id: str):
    """Delete a scheduled post"""
    try:
        global scheduled_posts
        scheduled_posts = [post for post in scheduled_posts if post["id"] != post_id]
        return {"success": True, "message": "Post deleted successfully"}
    except Exception as e:
        return {"success": False, "message": f"Error deleting post: {str(e)}"}

@app.get("/api/analytics")
async def get_analytics():
    """Get analytics data"""
    try:
        analytics = {
            "totalPosts": len(scheduled_posts),
            "activePosts": len([p for p in scheduled_posts if p["status"] == "scheduled"]),
            "completedPosts": len([p for p in scheduled_posts if p["status"] == "completed"]),
            "autoPosterEnabled": auto_poster_status["enabled"]
        }
        return {"success": True, "analytics": analytics}
    except Exception as e:
        return {"success": False, "message": f"Error retrieving analytics: {str(e)}"}

@app.get("/api/platform-settings")
async def get_platform_settings():
    """Get platform settings"""
    try:
        settings = {
            "instagram": {"enabled": True, "connected": False},
            "facebook": {"enabled": True, "connected": False},
            "twitter": {"enabled": True, "connected": False}
        }
        return {"success": True, "settings": settings}
    except Exception as e:
        return {"success": False, "message": f"Error retrieving platform settings: {str(e)}"}

@app.post("/api/test-connection/{platform}")
async def test_platform_connection(platform: str):
    """Test platform connection"""
    try:
        # Simulate connection test
        return {
            "success": True,
            "platform": platform,
            "connected": False,
            "message": f"Connection test for {platform} completed"
        }
    except Exception as e:
        return {"success": False, "message": f"Error testing connection: {str(e)}"}

if __name__ == "__main__":
    import uvicorn
    print("ðŸš€ Starting M1A AutoPoster API Server...")
    print("ðŸ“± API will be available at: http://localhost:8000")
    print("ðŸ“– API Documentation: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000)
