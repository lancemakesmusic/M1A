#!/usr/bin/env python3
"""
Simple HTTP Server for M1A AutoPoster API
This is a basic HTTP server that works with the React Native frontend
"""

import http.server
import socketserver
import json
import urllib.parse
from datetime import datetime
import uuid

class AutoPosterHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        """Handle GET requests"""
        if self.path == '/api/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {
                "status": "healthy",
                "timestamp": datetime.now().isoformat()
            }
            self.wfile.write(json.dumps(response).encode())
        
        elif self.path == '/api/scheduled-posts':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {
                "success": True,
                "posts": [],
                "message": "Scheduled posts retrieved successfully"
            }
            self.wfile.write(json.dumps(response).encode())
        
        elif self.path == '/api/media-library':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {
                "success": True,
                "media": [
                    {
                        "id": "1",
                        "name": "Sample Image 1",
                        "url": "https://via.placeholder.com/300x300",
                        "type": "image",
                        "createdAt": datetime.now().isoformat()
                    }
                ],
                "message": "Media library retrieved successfully"
            }
            self.wfile.write(json.dumps(response).encode())
        
        elif self.path == '/api/auto-poster-status':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {
                "success": True,
                "enabled": False,
                "message": "Auto poster status retrieved successfully"
            }
            self.wfile.write(json.dumps(response).encode())
        
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {"error": "Not found"}
            self.wfile.write(json.dumps(response).encode())

    def do_POST(self):
        """Handle POST requests"""
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        if self.path == '/api/generate-content':
            try:
                data = json.loads(post_data.decode('utf-8'))
                
                # Generate simple content
                generated_content = f"""
üéØ **{data.get('content_type', 'post').title()} for {data.get('platform', 'instagram').title()}**

**Prompt:** {data.get('prompt', 'No prompt provided')}

**Brand Voice:** {data.get('brand_voice', 'professional')}
**Target Audience:** {data.get('target_audience', 'general')}

**Generated Content:**
This is a sample generated post based on your prompt. In production, this would be generated by your AI service.

The content would be tailored for {data.get('platform', 'instagram')} and optimized for {data.get('target_audience', 'general')} audience with a {data.get('brand_voice', 'professional')} tone.

#content #socialmedia #automation
                """.strip()
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {
                    "success": True,
                    "content": generated_content,
                    "message": "Content generated successfully"
                }
                self.wfile.write(json.dumps(response).encode())
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {
                    "success": False,
                    "message": f"Error generating content: {str(e)}"
                }
                self.wfile.write(json.dumps(response).encode())
        
        elif self.path == '/api/schedule-post':
            try:
                data = json.loads(post_data.decode('utf-8'))
                post_id = str(uuid.uuid4())
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {
                    "success": True,
                    "postId": post_id,
                    "message": "Post scheduled successfully"
                }
                self.wfile.write(json.dumps(response).encode())
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {
                    "success": False,
                    "message": f"Error scheduling post: {str(e)}"
                }
                self.wfile.write(json.dumps(response).encode())
        
        elif self.path == '/api/toggle-auto-poster':
            try:
                data = json.loads(post_data.decode('utf-8'))
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {
                    "success": True,
                    "enabled": data.get('enabled', False),
                    "message": f"Auto poster {'enabled' if data.get('enabled', False) else 'disabled'} successfully"
                }
                self.wfile.write(json.dumps(response).encode())
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {
                    "success": False,
                    "message": f"Error toggling auto poster: {str(e)}"
                }
                self.wfile.write(json.dumps(response).encode())
        
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {"error": "Not found"}
            self.wfile.write(json.dumps(response).encode())

    def do_OPTIONS(self):
        """Handle CORS preflight requests"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()

    def log_message(self, format, *args):
        """Override to reduce log noise"""
        pass

def run_server(port=8001):
    """Start the HTTP server"""
    try:
        with socketserver.TCPServer(("", port), AutoPosterHandler) as httpd:
            print(f"üöÄ M1A AutoPoster API Server running on port {port}")
            print(f"üì± API available at: http://localhost:{port}")
            print(f"üîó Health check: http://localhost:{port}/api/health")
            print("Press Ctrl+C to stop the server")
            httpd.serve_forever()
    except OSError as e:
        if e.errno == 10048:  # Port already in use
            print(f"‚ùå Port {port} is already in use. Trying port {port + 1}")
            run_server(port + 1)
        else:
            print(f"‚ùå Error starting server: {e}")
    except KeyboardInterrupt:
        print("\nüõë Server stopped")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")

if __name__ == "__main__":
    run_server()
