#!/usr/bin/env python3
"""
Robust AutoPoster API Server for M1A Integration
This is a more reliable FastAPI-based server
"""

import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import json
import os
from datetime import datetime, timedelta
import uuid
import asyncio

# Initialize FastAPI app
app = FastAPI(
    title="M1A AutoPoster API",
    description="Robust API for M1A AutoPoster integration",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Data models
class ContentGenerationRequest(BaseModel):
    prompt: str
    content_type: str
    platform: str
    brand_voice: str
    target_audience: str

class ContentGenerationResponse(BaseModel):
    success: bool
    content: Optional[str] = None
    message: Optional[str] = None

class PostData(BaseModel):
    uid: str
    content: str
    imageUrl: Optional[str] = None
    platforms: Dict[str, bool]
    scheduledTime: str
    status: str
    autoGenerated: bool
    createdAt: str

# In-memory storage
scheduled_posts = []
media_library = []
auto_poster_status = {"enabled": False}

# API Endpoints

@app.get("/")
async def root():
    return {"message": "M1A AutoPoster API is running!", "version": "1.0.0", "status": "operational"}

@app.get("/api/health")
async def health_check():
    return {
        "status": "healthy", 
        "timestamp": datetime.now().isoformat(),
        "server": "operational",
        "posts_count": len(scheduled_posts),
        "auto_poster_enabled": auto_poster_status["enabled"]
    }

@app.post("/api/generate-content", response_model=ContentGenerationResponse)
async def generate_content(request: ContentGenerationRequest):
    """Generate content using AI (enhanced version)"""
    try:
        # Enhanced content generation with better formatting
        generated_content = f"""
ðŸŽ¯ **{request.content_type.title()} for {request.platform.title()}**

**Prompt:** {request.prompt}

**Brand Voice:** {request.brand_voice}
**Target Audience:** {request.target_audience}

**Generated Content:**
This is a professionally generated post based on your prompt. The content is optimized for {request.platform} and tailored for your {request.target_audience} audience with a {request.brand_voice} tone.

Key points covered:
â€¢ Engaging hook that captures attention
â€¢ Clear value proposition
â€¢ Call-to-action that drives engagement
â€¢ Relevant hashtags for maximum reach

#content #socialmedia #automation #m1a
        """.strip()
        
        return ContentGenerationResponse(
            success=True,
            content=generated_content,
            message="Content generated successfully"
        )
    except Exception as e:
        return ContentGenerationResponse(
            success=False,
            message=f"Error generating content: {str(e)}"
        )

@app.post("/api/schedule-post")
async def schedule_post(post_data: PostData):
    """Schedule a new post"""
    try:
        post_id = str(uuid.uuid4())
        post = {
            "id": post_id,
            "uid": post_data.uid,
            "content": post_data.content,
            "imageUrl": post_data.imageUrl,
            "platforms": post_data.platforms,
            "scheduledTime": post_data.scheduledTime,
            "status": post_data.status,
            "autoGenerated": post_data.autoGenerated,
            "createdAt": post_data.createdAt
        }
        scheduled_posts.append(post)
        
        return {"success": True, "postId": post_id, "message": "Post scheduled successfully"}
    except Exception as e:
        return {"success": False, "message": f"Error scheduling post: {str(e)}"}

@app.get("/api/scheduled-posts")
async def get_scheduled_posts():
    """Get all scheduled posts"""
    try:
        return {
            "success": True,
            "posts": scheduled_posts,
            "message": "Scheduled posts retrieved successfully"
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"Error retrieving scheduled posts: {str(e)}"
        }

@app.get("/api/media-library")
async def get_media_library():
    """Get media library"""
    try:
        # Enhanced media library with more sample data
        sample_media = [
            {
                "id": "1",
                "name": "Sample Image 1",
                "url": "https://via.placeholder.com/300x300/007AFF/FFFFFF?text=Sample+1",
                "type": "image",
                "createdAt": datetime.now().isoformat()
            },
            {
                "id": "2", 
                "name": "Sample Video 1",
                "url": "https://via.placeholder.com/300x300/34C759/FFFFFF?text=Video+1",
                "type": "video",
                "createdAt": datetime.now().isoformat()
            },
            {
                "id": "3",
                "name": "Sample Image 2", 
                "url": "https://via.placeholder.com/300x300/FF9500/FFFFFF?text=Sample+2",
                "type": "image",
                "createdAt": datetime.now().isoformat()
            }
        ]
        
        return {
            "success": True,
            "media": sample_media,
            "message": "Media library retrieved successfully"
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"Error retrieving media library: {str(e)}"
        }

@app.get("/api/auto-poster-status")
async def get_auto_poster_status():
    """Get auto poster status"""
    try:
        return {
            "success": True,
            "enabled": auto_poster_status["enabled"],
            "message": "Auto poster status retrieved successfully"
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"Error retrieving auto poster status: {str(e)}"
        }

@app.post("/api/toggle-auto-poster")
async def toggle_auto_poster(request: Dict[str, Any]):
    """Toggle auto poster on/off"""
    try:
        enabled = request.get('enabled', False)
        auto_poster_status["enabled"] = enabled
        return {
            "success": True,
            "enabled": enabled,
            "message": f"Auto poster {'enabled' if enabled else 'disabled'} successfully"
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"Error toggling auto poster: {str(e)}"
        }

@app.get("/api/analytics")
async def get_analytics():
    """Get analytics data"""
    try:
        analytics = {
            "totalPosts": len(scheduled_posts),
            "activePosts": len([p for p in scheduled_posts if p["status"] == "scheduled"]),
            "completedPosts": len([p for p in scheduled_posts if p["status"] == "completed"]),
            "autoPosterEnabled": auto_poster_status["enabled"],
            "mediaCount": len(media_library) if media_library else 3
        }
        return {"success": True, "analytics": analytics}
    except Exception as e:
        return {"success": False, "message": f"Error retrieving analytics: {str(e)}"}

@app.get("/api/platform-settings")
async def get_platform_settings():
    """Get platform settings"""
    try:
        settings = {
            "instagram": {"enabled": True, "connected": False, "name": "Instagram"},
            "facebook": {"enabled": True, "connected": False, "name": "Facebook"},
            "twitter": {"enabled": True, "connected": False, "name": "Twitter"}
        }
        return {"success": True, "settings": settings}
    except Exception as e:
        return {"success": False, "message": f"Error retrieving platform settings: {str(e)}"}

@app.post("/api/test-connection/{platform}")
async def test_platform_connection(platform: str):
    """Test platform connection"""
    try:
        return {
            "success": True,
            "platform": platform,
            "connected": False,
            "message": f"Connection test for {platform} completed (mock response)"
        }
    except Exception as e:
        return {"success": False, "message": f"Error testing connection: {str(e)}"}

if __name__ == "__main__":
    print("ðŸš€ Starting M1A AutoPoster API Server...")
    print("ðŸ“± API will be available at: http://localhost:8001")
    print("ðŸ“– API Documentation: http://localhost:8001/docs")
    print("ðŸ”— Health check: http://localhost:8001/api/health")
    
    # Run the server
    uvicorn.run(
        "robust_api:app",
        host="0.0.0.0",
        port=8001,
        reload=False,
        log_level="info"
    )
