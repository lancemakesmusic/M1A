// functions/autoSchedule.js
// const functions = require("firebase-functions");












const admin = require("firebase-admin");
      const { onSchedule } = require("firebase-functions/v2/scheduler");
const { getFirestore } = require("firebase-admin/firestore");
      // Initialize Firebase Admin SDK
admin.initializeApp();
      const db = getFirestore();
      /**
 * Auto-Schedule Webhook: Automatically schedules media from user"s library
 * Runs every hour to check for new media and schedule optimal posts
 */
exports.autoScheduleWebhook = onSchedule({
  schedule: "0 * * * *", // Every hour
  timeZone: "America/New_York",
}, async (event) => {
  try {
    // Get all users with active Auto-Poster plans
    const usersSnapshot = await db.collection("users")
      .where("plans.autoPoster", "==", "active")
      .get();
      for (const userDoc of usersSnapshot.docs) {
      const userId = userDoc.id;
      // const userData = userDoc.data();
      // Get user"s media library
      const mediaSnapshot = await db.collection("mediaLibrary")
        .where("uid", "==", userId)
        .where("scheduled", "==", false)
        .orderBy("createdAt", "asc")
        .limit(10)
        .get();
      if (mediaSnapshot.empty) {
        continue;
      }

      // Get optimal schedule for next 7 days
      const optimalSchedule = generateOptimalSchedule(7);
      // Schedule media with optimal times
      for (let i = 0; i < Math.min(mediaSnapshot.docs.length, optimalSchedule.length); i++) {
        const mediaDoc = mediaSnapshot.docs[i];
        const mediaData = mediaDoc.data();
      const scheduleSlot = optimalSchedule[i];

        // Create scheduled post
        await db.collection("scheduledPosts").add({
          uid: userId,
          content: generateContentForMedia(mediaData),
          imageUrl: mediaData.uri,
          platforms: {
            instagram: true,
            facebook: true,
            twitter: true
          },
          scheduledTime: new Date(`${scheduleSlot.date}T${scheduleSlot.time}:00`),
          status: "scheduled",
          autoGenerated: true,
          createdAt: admin.firestore.FieldValue.serverTimestamp()
        });
      // Mark media as scheduled
        await mediaDoc.ref.update({
          scheduled: true,
          scheduledAt: admin.firestore.FieldValue.serverTimestamp()
        });
      }
    }

    } catch (_error) {
    }
});
      /**
 * Generate optimal posting schedule for specified days
 */
function generateOptimalSchedule(days) {
  const schedule = [];
  const today = new Date();
      // Optimal times for each platform
  const optimalTimes = {
    instagram: [
      { time: "06:00", day: "monday", engagement: "high" },
      { time: "09:00", day: "tuesday", engagement: "high" },
      { time: "12:00", day: "wednesday", engagement: "high" },
      { time: "15:00", day: "thursday", engagement: "high" },
      { time: "18:00", day: "friday", engagement: "high" },
      { time: "20:00", day: "saturday", engagement: "high" },
      { time: "10:00", day: "sunday", engagement: "high" }
    ],
    facebook: [
      { time: "08:00", day: "monday", engagement: "high" },
      { time: "11:00", day: "tuesday", engagement: "high" },
      { time: "14:00", day: "wednesday", engagement: "high" },
      { time: "17:00", day: "thursday", engagement: "high" },
      { time: "19:00", day: "friday", engagement: "high" },
      { time: "21:00", day: "saturday", engagement: "high" },
      { time: "09:00", day: "sunday", engagement: "high" }
    ],
    x: [
      { time: "07:00", day: "monday", engagement: "high" },
      { time: "10:00", day: "tuesday", engagement: "high" },
      { time: "13:00", day: "wednesday", engagement: "high" },
      { time: "16:00", day: "thursday", engagement: "high" },
      { time: "18:00", day: "friday", engagement: "high" },
      { time: "22:00", day: "saturday", engagement: "high" },
      { time: "08:00", day: "sunday", engagement: "high" }
    ]
  };

  for (let i = 0; i < days; i++) {
    const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dayName = date.toLocaleDateString("en-US", { weekday: "lowercase" });
      // Get optimal times for each platform
      const instagramTime = optimalTimes.instagram.find(t => t.day === dayName);
      const facebookTime = optimalTimes.facebook.find(t => t.day === dayName);
      const xTime = optimalTimes.x.find(t => t.day === dayName);
      if (instagramTime) {
      schedule.push({
        date: date.toISOString().split("T")[0],
        time: instagramTime.time,
        platform: "instagram",
        engagement: instagramTime.engagement
      });
      }
    
    if (facebookTime) {
      schedule.push({
        date: date.toISOString().split("T")[0],
        time: facebookTime.time,
        platform: "facebook",
        engagement: facebookTime.engagement
      });
      }
    
      if (xTime) {
        schedule.push({
          date: date.toISOString().split("T")[0],
          time: xTime.time,
          platform: "x",
          engagement: xTime.engagement
        });
      }
  }
  
  return schedule;
}

/**
 * Generate content for media based on type and metadata
 */
function generateContentForMedia(mediaData) {
  const contentTemplates = [
    "Check out this amazing content! 🚀",
    "Excited to share this with you! ✨",
    "Here's something special for you today! 💫",
    "Hope you enjoy this! 😊",
    "Sharing some great content with you! 🌟",
    "This is worth sharing! 🔥",
    "Enjoy this beautiful content! 💎",
    "Something awesome to brighten your day! ☀️"
  ];
  
  // Select random template
  const template = contentTemplates[Math.floor(Math.random() * contentTemplates.length)];
  
  // Add relevant hashtags based on media type
  const hashtags = [
    "#content", "#social", "#media", "#share", "#awesome", "#amazing", "#beautiful", "#great"
  ];
  
  return `;${template} ${hashtags.join(" ")}`;
}

