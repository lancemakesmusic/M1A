rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {

    /*** Helpers ***/
    function isSignedIn() {
      return request.auth != null;
    }
    function isConvMember(cid) {
      return isSignedIn() &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(cid)).data.members;
    }
    // Basic timestamp sanity: not in the future
    // Note: serverTimestamp() creates a placeholder that gets resolved on server
    function validTimestamp(ts) {
      return ts is timestamp && ts <= request.time;
    }
    
    // Check if field is a serverTimestamp placeholder
    function isServerTimestamp(ts) {
      return ts == request.time;
    }
    // Allow-list fields helper
    function hasOnlyAllowed(data, allowed) {
      return data.keys().hasOnly(allowed);
    }

    /*** USERS ***/
    match /users/{userId} {
      // Choose one of these read policies:
      // allow read: if true;             // public profiles
      allow read:  if isSignedIn();       // signed-in only (current behavior)

      // Owner-only writes; allow-list typical profile fields
      allow create: if isSignedIn()
        && request.auth.uid == userId
        && hasOnlyAllowed(request.resource.data, [
          'displayName', 'username', 'bio', 'avatarUrl', 'coverUrl', 'location', 'website', 
          'socials', 'private', 'showOnlineStatus', 'allowMessages', 'photoURL', 'photoUpdatedAt',
          'theme', 'links', 'createdAt', 'updatedAt', 'plans', 'wallet', 'convertedFiles'
        ])
        && (isServerTimestamp(request.resource.data.createdAt) || validTimestamp(request.resource.data.createdAt));

      allow update: if isSignedIn()
        && request.auth.uid == userId
        && hasOnlyAllowed(request.resource.data, [
          // same set; require updatedAt on update
          'displayName', 'username', 'bio', 'avatarUrl', 'coverUrl', 'location', 'website', 
          'socials', 'private', 'showOnlineStatus', 'allowMessages', 'photoURL', 'photoUpdatedAt',
          'theme', 'links', 'createdAt', 'updatedAt', 'plans', 'wallet', 'convertedFiles'
        ])
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt));

      // Typically block deletes (or allow owner if you support account deletion)
      allow delete: if false;
    }

    /*** CONVERSATIONS ***/
    match /conversations/{cid} {
      // Read only if member
      allow read: if isConvMember(cid);

      // Create: creator must be in members; allow-list fields
      allow create: if isSignedIn()
        && request.resource.data.members is list
        && request.auth.uid in request.resource.data.members
        && hasOnlyAllowed(request.resource.data, [
          'members', 'title', 'createdAt', 'updatedAt', 'lastMessageAt'
        ])
        && (isServerTimestamp(request.resource.data.createdAt) || validTimestamp(request.resource.data.createdAt))
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt));

      // Update: only members; restrict what can change & require updatedAt
      allow update: if isConvMember(cid)
        && hasOnlyAllowed(request.resource.data, [
          'members', 'title', 'createdAt', 'updatedAt', 'lastMessageAt'
        ])
        // keep createdAt immutable
        && request.resource.data.createdAt == resource.data.createdAt
        // updatedAt must exist and be sane
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt))
        // If members array changes, ensure it's still a list and not empty
        && (request.resource.data.members is list)
        // (Optional) Prevent removing everyone:
        && (request.resource.data.members.size() > 0);

      // Usually block deletes in prod
      allow delete: if false;
    }

    /*** MESSAGES (subcollection) ***/
    match /conversations/{cid}/messages/{mid} {
      // Only members read
      allow read: if isConvMember(cid);

      // Create: stricter field validation
      allow create: if isConvMember(cid)
        && hasOnlyAllowed(request.resource.data, [
          'senderId', 'text', 'mediaUrl', 'createdAt', 'reactions'
        ])
        // sender == caller
        && request.resource.data.senderId == request.auth.uid
        // require content: non-empty text OR mediaUrl string
        && (
             (request.resource.data.text is string
              && request.resource.data.text.size() > 0
              && request.resource.data.text.size() <= 5000) // text cap
             ||
             (request.resource.data.mediaUrl is string
              && request.resource.data.mediaUrl.size() > 0)
           )
        // createdAt must be a sane timestamp (serverTimestamp resolves to timestamp)
        && (isServerTimestamp(request.resource.data.createdAt) || validTimestamp(request.resource.data.createdAt))
        // reactions must be a map if present (e.g., { "üëç": ["uid1","uid2"] })
        && (
             !(request.resource.data.keys().hasAny(['reactions']))
             ||
             (request.resource.data.reactions is map)
           );

      // Messages immutable (no edits/deletes)
      allow update, delete: if false;
    }

    /*** OPTIONAL: typing indicators ***/
    // If you store typing state (e.g., /conversations/{cid}/typing/{uid}),
    // gate it by membership and allow minimal writes.
    match /conversations/{cid}/typing/{uid} {
      allow read: if isConvMember(cid);
      allow create, update: if isConvMember(cid)
        && request.auth.uid == uid
        && hasOnlyAllowed(request.resource.data, ['isTyping', 'updatedAt'])
        && (request.resource.data.isTyping is bool)
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt));
      allow delete: if isConvMember(cid) && request.auth.uid == uid;
    }

    /*** AUTO POSTER COLLECTIONS ***/
    
    // Scheduled Posts Collection
    match /scheduledPosts/{postId} {
      // Users can only read their own scheduled posts
      allow read: if isSignedIn() && request.auth.uid == resource.data.uid;
      
      // Users can create their own scheduled posts
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.uid
        && hasOnlyAllowed(request.resource.data, [
          'uid', 'content', 'imageUrl', 'platforms', 'scheduledTime', 
          'status', 'autoGenerated', 'createdAt', 'updatedAt'
        ])
        && (isServerTimestamp(request.resource.data.createdAt) || validTimestamp(request.resource.data.createdAt));
      
      // Users can update their own scheduled posts
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.uid
        && hasOnlyAllowed(request.resource.data, [
          'uid', 'content', 'imageUrl', 'platforms', 'scheduledTime', 
          'status', 'autoGenerated', 'createdAt', 'updatedAt'
        ])
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt));
      
      // Users can delete their own scheduled posts
      allow delete: if isSignedIn() && request.auth.uid == resource.data.uid;
    }

    // Media Library Collection
    match /mediaLibrary/{mediaId} {
      // Users can only read their own media
      allow read: if isSignedIn() && request.auth.uid == resource.data.uid;
      
      // Users can create their own media
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.uid
        && hasOnlyAllowed(request.resource.data, [
          'uid', 'title', 'uri', 'type', 'size', 'createdAt', 'updatedAt'
        ])
        && (isServerTimestamp(request.resource.data.createdAt) || validTimestamp(request.resource.data.createdAt));
      
      // Users can update their own media
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.uid
        && hasOnlyAllowed(request.resource.data, [
          'uid', 'title', 'uri', 'type', 'size', 'createdAt', 'updatedAt'
        ])
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt));
      
      // Users can delete their own media
      allow delete: if isSignedIn() && request.auth.uid == resource.data.uid;
    }

    // User Brand Kit Subcollection
    match /users/{userId}/brandKit/{kitId} {
      // Users can read their own brand kit
      allow read: if isSignedIn() && request.auth.uid == userId;
      
      // Users can create/update their own brand kit
      allow create, update: if isSignedIn()
        && request.auth.uid == userId
        && hasOnlyAllowed(request.resource.data, [
          'brandVoice', 'brandColors', 'brandValues', 'targetAudience', 
          'contentGuidelines', 'createdAt', 'updatedAt'
        ])
        && (isServerTimestamp(request.resource.data.createdAt) || validTimestamp(request.resource.data.createdAt))
        && (isServerTimestamp(request.resource.data.updatedAt) || validTimestamp(request.resource.data.updatedAt));
      
      // Users can delete their own brand kit
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    // User Generation History Subcollection
    match /users/{userId}/generationHistory/{historyId} {
      // Users can read their own generation history
      allow read: if isSignedIn() && request.auth.uid == userId;
      
      // Users can create their own generation history
      allow create: if isSignedIn()
        && request.auth.uid == userId
        && hasOnlyAllowed(request.resource.data, [
          'prompt', 'contentType', 'platform', 'response', 'timestamp'
        ])
        && (isServerTimestamp(request.resource.data.timestamp) || validTimestamp(request.resource.data.timestamp));
      
      // Generation history is immutable (no updates/deletes)
      allow update, delete: if false;
    }
  }
}
